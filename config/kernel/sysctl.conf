# Generate by Infra as Code

###
### GENERAL SYSTEM OPTIONS          ###
###

# The settings seem reasonable for controlling the verbosity of kernel messages.
kernel.printk = 4 4 1 7 

# Controls the System Request debugging functionality of the kernel
# Disabled, which is typical for security.
kernel.sysrq = 0

# Controls whether core dumps will append the PID to the core filename.
# Useful for debugging multi-threaded applications.
kernel.core_uses_pid = 1

# Allow for more PIDs. Increased PID limit, suitable for systems spawning many processes.
kernel.pid_max = 65535

# Changing Semaphore Limits
kernel.msgmni = 1024
kernel.sem = 250 256000 32 1024

# Controls the default maximum size of a message queue
kernel.msgmnb = 65535

# Controls the maximum size of a message, in bytes
kernel.msgmax = 65535

# Enabled, enhances security against certain types of attacks.
kernel.randomize_va_space = 1

# Disabled core dumps for SUID programs, good for security.
fs.suid_dumpable = 0

# Restricts kernel pointer exposure - a good security practice.
kernel.kptr_restrict = 1

###
### IMPROVE SYSTEM MEMORY MANAGEMENT ###
###

# Maximum shared segment size in bytes
kernel.shmmax = {{ kernel_shmmax }}

# Maximum number of shared memory segments in pages
kernel.shmall = {{ kernel_shmall }}

# System open file limit
fs.file-max = {{ kernel_file_max }}

# Keep at least 64MB of free RAM space available
vm.min_free_kbytes = {{ kernel_min_free }}

# Increasing the amount of inotify watchers
fs.inotify.max_user_watches = 524288

# Overcommit memory
vm.overcommit_memory = 1

###
### RFC COMPLIANCE                   ###
###

# RFC 1337 fix
net.ipv4.tcp_rfc1337 = 1

# No controls source route verification (RFC1812)
net.ipv4.conf.default.rp_filter = 0

# Enable a fix for RFC1337 - time-wait assassination hazards in TCP
net.ipv4.tcp_rfc1337 = 1

# Enable window scaling as defined in RFC1323
net.ipv4.tcp_window_scaling = 1

###
### GENERAL NETWORK SECURITY OPTIONS ###
###

# Disable syncookies 
# (syncookies are not RFC compliant and can use too many resources)
net.ipv4.tcp_syncookies = 0

# Basic TCP tuning
net.ipv4.tcp_keepalive_time = 600

# Number of times SYNACKs for passive TCP connection.
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 3

# Max number of remembered connection requests
# TCP_SYNQ_HSIZE*16<=tcp_max_syn_backlog
# NOTE: Setting this too low may impact IP6 Sessions
net.ipv4.tcp_max_syn_backlog = 20000

# Disables packet forwarding
net.ipv4.ip_forward = 0
net.ipv4.conf.all.forwarding = 0
net.ipv4.conf.default.forwarding = 0
#net.ipv6.conf.all.forwarding = 0
#net.ipv6.conf.default.forwarding = 0

# Disables IP source routing
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
#net.ipv6.conf.all.accept_source_route = 0
#net.ipv6.conf.default.accept_source_route = 0

# Enable IP spoofing protection, turn on source route verification
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# Disable ICMP Redirect Acceptance
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
#net.ipv6.conf.all.accept_redirects = 0
#net.ipv6.conf.default.accept_redirects = 0

# Enable Log Spoofed Packets, Source Routed Packets, Redirect Packets
net.ipv4.conf.default.log_martians = 1

# Log packets with impossible addresses to kernel log
net.ipv4.conf.all.log_martians = 1

# How long to keep sockets in the state FIN-WAIT-2
# if we were the one closing the socket
net.ipv4.tcp_fin_timeout = 20

# Decrease the time default value for connections to keep alive
# Disconnect dead TCP connections after 600+(60*10) seconds
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_keepalive_probes = 60
net.ipv4.tcp_keepalive_intvl = 15

# nf_conntrack: setting is removed in modern kernels
#net.netfilter.nf_conntrack_helper = 0

# Don't relay bootp
net.ipv4.conf.all.bootp_relay = 0

# Don't proxy arp for anyone
net.ipv4.conf.all.proxy_arp = 0

# Turn on the tcp_timestamps, accurate timestamp makes TCP congestion control algorithms work better
net.ipv4.tcp_timestamps = 1

# Don't ignore directed pings
net.ipv4.icmp_echo_ignore_all = 0

# Enable ignoring broadcasts request
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Enable bad error message Protection
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Allowed local port range
net.ipv4.ip_local_port_range = 2000 65535

# Disable IPv6 by boot -> Use the kernel boot parameter to disable IPv6 instead
#net.ipv6.conf.all.disable_ipv6=1
#net.ipv6.conf.default.disable_ipv6=1
#ipv6.disable_ipv6 = 1
#net.ipv6.conf.all.autoconf=0
#net.ipv6.conf.all.accept_ra=0
#net.ipv6.conf.default.autoconf=0
#net.ipv6.conf.default.accept_ra=0
#net.ipv6.conf.eth0.autoconf=0
#net.ipv6.conf.eth0.accept_ra=0

###
### TUNING NETWORK PERFORMANCE ###
###

# If your servers talk UDP, also up these limits
net.ipv4.udp_rmem_min = 16384
net.ipv4.udp_wmem_min = 16384

# Increase the maximum total buffer-space allocatable
# This is measured in units of pages (4096 bytes)
net.ipv4.tcp_mem = {{ kernel_tcp_mem }}
net.ipv4.udp_mem = {{ kernel_udp_mem }}

# Enable the TCP selective acks option for better throughput
net.ipv4.tcp_sack = 1

# Enable FACK congestion avoidance and fast retransmission
net.ipv4.tcp_fack = 1

# Allows TCP to send "duplicate" SACKs
net.ipv4.tcp_dsack = 1

# For servers with tcp-heavy workloads, enable 'fq' queue management scheduler (kernel > 3.12)
net.core.default_qdisc = fq

# Increase Linux autotuning TCP buffer limits
# Set max to 16MB (16777216) for 1GE
# 32M (33554432) or 64M (67108864) for 10GE
# 128M (134217728) or 256M (268435456) for 40GE
# Don't set tcp_mem itself! Let the kernel scale it based on RAM.

# Increase the read-buffer space allocatable
net.ipv4.tcp_rmem = 4096 87380 67108864
net.ipv4.udp_rmem_min = 16384
net.core.rmem_default = 31457280
net.core.rmem_max = 67108864

# Increase the write-buffer-space allocatable
net.ipv4.tcp_wmem = 4096 87380 67108864
net.ipv4.udp_wmem_min = 16384
net.core.wmem_default = 31457280
net.core.wmem_max = 67108864

# Increase number of incoming connections that can queue up before dropping
net.core.somaxconn = 65365

# Increase number of incoming connections backlog
net.core.netdev_max_backlog = {{ kernel_netdev_max_backlog }}
net.core.dev_weight = 64

# Increase the maximum amount of option memory buffers
net.core.optmem_max = 25165824

# Try to reuse time-wait connections, but don't recycle them (recycle can break clients behind NAT)
net.ipv4.tcp_tw_reuse = 1

# Tells the kernel how many TCP sockets that are not attached
# to any user file handle to maintain
net.ipv4.tcp_max_orphans = {{ kernel_tcp_max_orphans }}

# How many times to retry before killing TCP connection, closed by our side
net.ipv4.tcp_orphan_retries = 1

# Maximum number of sockets in TIME-WAIT to be held simultaneously
net.ipv4.tcp_max_tw_buckets = {{ kernel_tcp_max_tw_buckets }}

# Increase the maximum memory used to reassemble IP fragments
net.ipv4.ipfrag_high_thresh = 8388608
net.ipv4.ipfrag_low_thresh = 3145728

# Don't cache ssthresh from previous connection
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_moderate_rcvbuf = 1

# Increase size of RPC datagram queue length
net.unix.max_dgram_qlen = 50

# Don't allow the arp table to become bigger than this
net.ipv4.neigh.default.gc_thresh3 = 2048

# Tell the gc when to become aggressive with arp table cleaning.
# Adjust this based on size of the LAN. 1024 is suitable for most /24 networks
net.ipv4.neigh.default.gc_thresh2 = 1024

# Adjust where the gc will leave arp table alone - set to 32.
net.ipv4.neigh.default.gc_thresh1 = 32

# Adjust to arp table gc to clean-up more often
net.ipv4.neigh.default.gc_interval = 30

# Increase TCP queue length
net.ipv4.neigh.default.proxy_qlen = 96
net.ipv4.neigh.default.unres_qlen = 6

# Disable Explicit Congestion Notification in TCP
net.ipv4.tcp_ecn = 0

net.ipv4.tcp_reordering = 3

# How many times to retry killing an alive TCP connection
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_retries1 = 3

# Avoid falling back to slow start after a connection goes idle
# Keeps our cwnd large with the keep-alive connections (kernel > 3.6)
net.ipv4.tcp_slow_start_after_idle = 0

# Controls TCP Packetization-Layer Path MTU Discovery
net.ipv4.tcp_mtu_probing = 1

# Allow the TCP fastopen flag to be used, beware some firewalls do not like TFO! (kernel > 3.7)
net.ipv4.tcp_fastopen = 3

# This will ensure that immediately subsequent connections use the new values
net.ipv4.route.flush = 1
#net.ipv6.route.flush = 1
